package com.study.fliter;

import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.study.domain.User;

@WebFilter("/*")
public class SercurityFilter extends HttpFilter implements Filter {

	private static final long serialVersionUID = 1L;

	public void destroy() {
	}

	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {

		HttpServletRequest req = (HttpServletRequest) request;
		HttpServletResponse resp = (HttpServletResponse) response;

		String requestURI = req.getRequestURI();
		String antMatchers = "/mapage, /mypage/password";

		if (antMatchers.contains(requestURI) && !authorization(req.getSession())) {
			// antMatchers가 requestURI를 포함하고 있는지? 그리고 req.getSession을 날려줫을때 인증이 되지않으면 ture(로그인을 안했다는 의미로 둘중하나에 들어왓다)
			resp.sendRedirect("/login");
			return;

		}

		chain.doFilter(request, response);
	}

	private boolean authorization(HttpSession session) {
		User principalUser = (User) session.getAttribute("principal");
		return principalUser != null;
	}

	public void init(FilterConfig fConfig) throws ServletException {
	}

}
